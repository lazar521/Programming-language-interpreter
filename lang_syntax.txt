This document only shows what parser considers 'right' syntax. It only helps to keep track of how the parser works.
Keep in mind that not every production accepted by the parser will also be accepted by the semantic checker


// PROGRAM
program -> declStmt*


// STATEMENTS
stmt -> exprStmt | assignStmt | declStmt | whileStmt | forStmt | ifStmt | retStmt 
exprStmt -> expression ';'                                                      ===> SHOULD CHANGE THIS  
declStmt -> ( 'var' varDecl ';' | 'fn' funcDecl  ) 
whileStmt -> 'while' '(' expression ')' '{' stmt* '}'
forStmt -> for '(' varDecl? ';' expression? ';' expression? ')' '{' stmt* '}'
ifStmt -> 'if' '(' expr ')' '{' stmt* '}'  
retStmt -> 'return' expression? ';'


// DECLARATIONS
varDecl -> typeSpecifier identifier ( '=' expression )? 
funcDecl -> typeSpecifier identifier '(' (param (',' param)* )? ')' '{' stmt* '}'
param -> typeSpecifier identifier 


// EXPRESSIONS
expression -> assignment 
assignment -> (identifier '=') equality                 ===> SHOULD ADD THIS
equality -> comparison ( equality_operator comparison )*
addition -> multiplication ( addition_operator multiplication )*
multiplication -> term ( multiplication_operator term )*
term -> unary_operator? primary
primary- > identifier
         | literal |
         | '(' equality ')'
         | identifier '(' identifier (',' identifier)* ')'
literal -> NUM_LITERAL | STRING_LITERAL

